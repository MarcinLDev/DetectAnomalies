# app.py
# ————————————————————————————————————————————————————————————————————
# Dashboard AI dla gminy – Predykcja awarii sieci wodno-kanalizacyjnej
# Wszystkie nazwy zmiennych/funkcji po polsku
# ————————————————————————————————————————————————————————————————————
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.units import cm

import os, time
from io import BytesIO
import numpy as np
import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    classification_report, confusion_matrix
)

# ============ USTAWIENIA STRONY ============
st.set_page_config(
    page_title=" AI – Predykcja awarii sieci wodno-kanalizacyjnej",
    page_icon="",
    layout="wide",
)

import base64

SCIEZKA_LOGO = "assets/Logo.png"   # <- tu Twój plik

def wstaw_logo_fixed(logo_path=SCIEZKA_LOGO, link="#", wysokosc=48):
    if not os.path.exists(logo_path):
        return
    b64 = base64.b64encode(open(logo_path, "rb").read()).decode()
    st.markdown(f"""
    <a href="{link}">
      <img src="data:image/png;base64,{b64}" class="logo-fixed">
    </a>
    <style>
      .logo-fixed {{
        position: fixed;
        top: 12px; left: 14px;
        height: {wysokosc}px;
        z-index: 1000;
      }}
      @media (max-width: 768px) {{
        .logo-fixed {{ height: 40px; }}
      }}
    </style>
    """, unsafe_allow_html=True)

wstaw_logo_fixed()

st.markdown("""
<style>
/* Wyraźny, ciemny kolor napisów przy wszystkich widgetach */
[data-testid="stWidgetLabel"] > label,
[data-testid="stWidgetLabel"] > div > p,
[data-testid="stWidgetLabel"] p,
[data-testid="stSliderLabel"],
[data-testid="stMarkdownContainer"] p {
  color: #111111 !important;
  opacity: 1 !important;
}

/* (opcjonalnie) rozjaśnij tło pól wyboru, jeśli były ciemne */
[data-baseweb="select"] > div {
  background-color: #ffffff !important;
  color: #111111 !important;
  border-color: #e5e7eb !important;
}
</style>
""", unsafe_allow_html=True)

# — jasny motyw (wymuszone białe tło + styl przycisków pobierania)
st.markdown("""
<style>
.stApp { background:#ffffff !important; color:#111111; }
.block-container { color:#111111; }

/* KPI karty */
.karta-kpi {border-radius:16px;padding:18px 22px;box-shadow:0 8px 20px rgba(0,0,0,.08);text-align:center;font-weight:600;}
.kpi-czerw{background:#ff4d4d;color:#fff;}
.kpi-zolty{background:#ffcc00;color:#111;}
.kpi-ziel {background:#22c55e;color:#fff;}
.podpis{color:#6b7280;font-size:.9rem;}
@keyframes puls {0%{box-shadow:0 0 0 0 rgba(255,77,77,.45);}70%{box-shadow:0 0 0 18px rgba(255,77,77,0);}100%{box-shadow:0 0 0 0 rgba(255,77,77,0);}}
.puls{animation:puls 2s infinite;}

/* Duże, wyraźne przyciski pobierania */
div[data-testid="stDownloadButton"] > button {
  width:100%; border:none; border-radius:12px; padding:14px 18px;
  background:#0B7CFF; color:#fff; font-weight:600; box-shadow:0 8px 18px rgba(11,124,255,.18);
}
div[data-testid="stDownloadButton"] > button:hover { background:#095fcc; }
</style>
""", unsafe_allow_html=True)


# ============ FUNKCJE POMOCNICZE ============
@st.cache_data
def wczytaj_dane(sciezka: str) -> pd.DataFrame:
    return pd.read_excel(sciezka)

def dodaj_etykiety_ryzyka(ramka: pd.DataFrame, progi=(10, 70)) -> pd.DataFrame:
    prog_sredni, prog_wysoki = progi
    def etykieta(p):
        if p >= prog_wysoki: return "🔴 Wysokie ryzyko"
        if p >= prog_sredni: return "🟡 Średnie ryzyko"
        return "🟢 Niskie ryzyko"
    ramka["Ocena_modelu"] = ramka["Ryzyko (%)"].apply(etykieta)
    return ramka

@st.cache_data
def przetworz_dane(dane: pd.DataFrame):
    dane_kopia = dane.copy()
    koder_materialu = LabelEncoder()
    koder_gleby     = LabelEncoder()
    dane_kopia["Pipe_Material"]    = koder_materialu.fit_transform(dane_kopia["Pipe_Material"])
    dane_kopia["Soil_Corrosivity"] = koder_gleby.fit_transform(dane_kopia["Soil_Corrosivity"])
    cechy_X = dane_kopia.drop(columns=["Pipe_ID", "Leak_Class"])
    etykiety_y = dane_kopia["Leak_Class"].astype(int)
    return dane_kopia, cechy_X, etykiety_y, koder_materialu, koder_gleby

@st.cache_resource
def naucz_model_rf(cechy_X, etykiety_y, los=42):
    X_tr, X_te, y_tr, y_te = train_test_split(
        cechy_X, etykiety_y, test_size=0.2, random_state=los, stratify=etykiety_y
    )
    model = RandomForestClassifier(n_estimators=250, random_state=los, class_weight="balanced")
    model.fit(X_tr, y_tr)
    y_pred = model.predict(X_te)
    metryki = {
        "Accuracy": accuracy_score(y_te, y_pred),
        "Precision": precision_score(y_te, y_pred),
        "Recall": recall_score(y_te, y_pred),
        "F1": f1_score(y_te, y_pred),
        "MacierzPomyłek": confusion_matrix(y_te, y_pred),
        "Raport": classification_report(y_te, y_pred, output_dict=True),
    }
    return model, metryki

def _zarejestruj_czcionki():
    """Zarejestruj czcionki z polskimi znakami. Gdy brak plików — wróć do Helvetica."""
    baza, pogrub = "Helvetica", "Helvetica-Bold"
    try:
        if os.path.exists("fonts/DejaVuSans.ttf"):
            pdfmetrics.registerFont(TTFont("DejaVu", "fonts/DejaVuSans.ttf"))
            pdfmetrics.registerFont(TTFont("DejaVu-Bold", "fonts/DejaVuSans-Bold.ttf"))
            baza, pogrub = "DejaVu", "DejaVu-Bold"
    except Exception:
        pass
    return baza, pogrub

def zbuduj_pdf(dane_wyniki: pd.DataFrame, kpi: dict, wykres_pizza, wykres_waznosc) -> bytes:
    """
    PDF: KPI (kolorowe kafelki), wykres kołowy, ważność cech, TOP-10.
    - Polska czcionka (DejaVu)
    - ostrzejsze obrazy z Plotly (scale=2)
    - kolumna 'Ocena' bez emoji (PDF-friendly)
    """
    # 1) Czcionki i style
    font_normal, font_bold = _zarejestruj_czcionki()
    styles = getSampleStyleSheet()
    styles["Title"].fontName = font_bold;  styles["Title"].fontSize = 22
    styles["Heading3"].fontName = font_bold
    styles["Normal"].fontName = font_normal; styles["Normal"].fontSize = 10

    # Dodatkowy styl dużych liczb KPI
    styl_kpi_numer = ParagraphStyle(
        "KPI_NUM", parent=styles["Normal"], fontName=font_bold, fontSize=24,
        textColor=colors.white, alignment=1
    )
    styl_kpi_etyk = ParagraphStyle(
        "KPI_LBL", parent=styles["Normal"], fontName=font_bold, fontSize=10,
        textColor=colors.white, alignment=1
    )

    # 2) Wykresy: wymuś białe tło i większą rozdzielczość
    for fig in (wykres_pizza, wykres_waznosc):
        fig.update_layout(template="plotly_white", paper_bgcolor="white", plot_bgcolor="white", font_color="#111")
    buf_pie, buf_imp = BytesIO(), BytesIO()
    wykres_pizza.write_image(buf_pie, format="png", scale=2)      # <— ostrzej
    wykres_waznosc.write_image(buf_imp, format="png", scale=2)    # <— ostrzej
    buf_pie.seek(0); buf_imp.seek(0)

    # 3) Dane TOP-10 (bez emoji)
    dane_pdf = dane_wyniki.copy()
    dane_pdf["Ocena_pdf"] = (dane_pdf["Ocena_modelu"]
                             .str.replace("🔴 ", "", regex=False)
                             .str.replace("🟡 ", "", regex=False)
                             .str.replace("🟢 ", "", regex=False))
    top10 = dane_pdf.sort_values("Ryzyko (%)", ascending=False).head(10)

    # 4) Start dokumentu
    bufor = BytesIO()
    doc = SimpleDocTemplate(bufor, pagesize=A4, leftMargin=24, rightMargin=24, topMargin=26, bottomMargin=24)
    el = []

    el.append(Paragraph("AI – Predykcja awarii sieci wodno-kanalizacyjnej", styles["Title"]))
    el.append(Spacer(1, 8))

    # 5) Kafle KPI (3 kolumny, 2 wiersze – etykieta + liczba)
    kpi_tab = Table([
        [Paragraph("Wysokie ryzyko", styl_kpi_etyk),
         Paragraph("Średnie ryzyko", styl_kpi_etyk),
         Paragraph("Niskie ryzyko",  styl_kpi_etyk)],
        [Paragraph(str(kpi["wysokie"]), styl_kpi_numer),
         Paragraph(str(kpi["srednie"]), styl_kpi_numer),
         Paragraph(str(kpi["niskie"]),  styl_kpi_numer)]
    ], colWidths=[6.1*cm, 6.1*cm, 6.1*cm], rowHeights=[14, 34])
    kpi_style = TableStyle([
        ("BACKGROUND", (0,0), (0,1), colors.Color(1, 0.30, 0.30)),   # czerwony
        ("BACKGROUND", (1,0), (1,1), colors.Color(1, 0.83, 0.00)),   # żółty
        ("BACKGROUND", (2,0), (2,1), colors.Color(0.20, 0.75, 0.36)),# zielony
        ("VALIGN", (0,0), (-1,-1), "MIDDLE"),
        ("ALIGN",  (0,0), (-1,-1), "CENTER"),
        ("TEXTCOLOR", (0,0), (-1,-1), colors.white),
        ("INNERGRID", (0,0), (-1,-1), 0.0, colors.white),
        ("BOX", (0,0), (-1,-1), 0.0, colors.white),
    ])
    kpi_tab.setStyle(kpi_style)
    el.append(kpi_tab)
    el.append(Spacer(1, 8))
    el.append(Paragraph(f"Łącznie elementów: {kpi['razem']}. Progi: średnie ≥ {int(round((kpi['srednie']>0)*0 or 0))}% (wg suwaka), wysokie ≥ …", styles["Normal"]))
    el.append(Spacer(1, 10))

    # 6) Wykresy
    el.append(Paragraph("Struktura ryzyka", styles["Heading3"]))
    el.append(Image(buf_pie, width=15.5*cm, height=9.8*cm))
    el.append(Spacer(1, 10))
    el.append(Paragraph("Najważniejsze czynniki ryzyka (feature importance)", styles["Heading3"]))
    el.append(Image(buf_imp, width=15.5*cm, height=9.8*cm))
    el.append(Spacer(1, 10))

    # 7) Tabela TOP-10 – neutralne szarości, polskie nagłówki
    el.append(Paragraph("TOP 10 – elementy o najwyższym ryzyku", styles["Heading3"]))
    nag = ["ID odcinka","Ciśnienie (PSI)","Przepływ (GPM)","Wiek rury (lata)","Ryzyko (%)","Ocena"]
    wiersze = [[
        r["Pipe_ID"], f"{r['Pressure_PSI']:.1f}", f"{r['Flow_GPM']:.1f}",
        int(r["Pipe_Age_Years"]), f"{r['Ryzyko (%)']:.0f}", r["Ocena_pdf"]
    ] for _,r in top10.iterrows()]
    t = Table([nag] + wiersze, repeatRows=1, colWidths=[3.1*cm, 3.2*cm, 3.2*cm, 3.1*cm, 2.2*cm, 4.0*cm])
    t_style = TableStyle([
        ("FONTNAME", (0,0), (-1,0), font_bold),
        ("FONTNAME", (0,1), (-1,-1), font_normal),
        ("FONTSIZE", (0,0), (-1,0), 10),
        ("FONTSIZE", (0,1), (-1,-1), 9),
        ("BACKGROUND", (0,0), (-1,0), colors.Color(.92,.95,.98)),
        ("ALIGN", (0,0), (-1,0), "CENTER"),
        ("ALIGN", (0,1), (-2,-1), "CENTER"),
        ("ALIGN", (-1,1), (-1,-1), "LEFT"),
        ("GRID", (0,0), (-1,-1), 0.25, colors.Color(.84,.86,.90)),
        ("ROWBACKGROUNDS",(0,1),(-1,-1),[colors.white, colors.Color(.97,.97,.97)]),
    ])
    t.setStyle(t_style)
    el.append(t)

    # 8) Render
    doc.build(el)
    return bufor.getvalue()

# ============ SIDEBAR – PROGI ============
st.sidebar.header("⚙️ Ustawienia analizy")
prog_sredni  = st.sidebar.slider("Próg średniego ryzyka (%)", 5, 60, 1, step=5)
prog_wysoki  = st.sidebar.slider("Próg wysokiego ryzyka (%)", 70, 95, 99, step=5)
st.sidebar.caption("Progi wpływają na kolory w dashboardzie i w raporcie PDF.")

# ============ DANE → MODEL → SKORING ============
sciezka_danych = "data/raw/water_network_leak_dataset.xlsx"
if not os.path.exists(sciezka_danych):
    st.error(f"Nie znaleziono pliku: {sciezka_danych}")
    st.stop()

dane_surowe = wczytaj_dane(sciezka_danych)
dane_modelowe, cechy_X, etykiety_y, koder_materialu, koder_gleby = przetworz_dane(dane_surowe)
model_rf, metryki = naucz_model_rf(cechy_X, etykiety_y)

prawdopodobienstwo = (model_rf.predict_proba(cechy_X)[:, 1] * 100).round(1)
dane_wyniki = dane_surowe.copy()
dane_wyniki["Ryzyko (%)"] = prawdopodobienstwo
dane_wyniki = dodaj_etykiety_ryzyka(dane_wyniki, (prog_sredni, prog_wysoki))

# ============ KPI ============
liczba_wysokie = (dane_wyniki["Ocena_modelu"] == "🔴 Wysokie ryzyko").sum()
liczba_srednie = (dane_wyniki["Ocena_modelu"] == "🟡 Średnie ryzyko").sum()
liczba_niskie  = (dane_wyniki["Ocena_modelu"] == "🟢 Niskie ryzyko").sum()
liczba_razem   = len(dane_wyniki)

# ============ NAGŁÓWEK + KPI ============
st.title("AI – Predykcja awarii sieci wodno-kanalizacyjnej")


# ============ TOP – elementy o najwyższym ryzyku (STEROWANIE) ============


kol1, kol2, kol3, _ = st.columns([1,1,1,0.3])
klasa_czer = "karta-kpi kpi-czerw puls" if liczba_wysokie > 0 else "karta-kpi kpi-czerw"
with kol1: st.markdown(f'<div class="{klasa_czer}">🔴 Wysokie ryzyko<br><span style="font-size:34px">{liczba_wysokie}</span></div>', unsafe_allow_html=True)
with kol2: st.markdown(f'<div class="karta-kpi kpi-zolty">🟡 Średnie ryzyko<br><span style="font-size:34px">{liczba_srednie}</span></div>', unsafe_allow_html=True)
with kol3: st.markdown(f'<div class="karta-kpi kpi-ziel">🟢 Niskie ryzyko<br><span style="font-size:34px">{liczba_niskie}</span></div>', unsafe_allow_html=True)
st.markdown(f"<div class='podpis'>Łącznie elementów: <b>{liczba_razem}</b>. Progi: średnie ≥ {prog_sredni}%, wysokie ≥ {prog_wysoki}%.</div>", unsafe_allow_html=True)

# st.subheader("🗺️ Network map (illustrative)")
st.image("assets/3!.png", use_container_width=True)

# st.divider()

# st.subheader("🔝 TOP – elementy o najwyższym ryzyku")
kol_top1, kol_top2, kol_top3 = st.columns([1,1,1])
with kol_top1:
    ile_pokazac = st.slider("Ile pozycji pokazać", min_value=5, max_value=100, value=10, step=5)
with kol_top2:
    kolumna_sort = st.selectbox("Sortuj wg", ["Ryzyko (%)","Pipe_Age_Years","Pressure_PSI","Flow_GPM"], index=0)
with kol_top3:
    rosnaco = st.toggle("Rosnąco", value=False)

widok_top = dane_wyniki.sort_values(kolumna_sort, ascending=rosnaco).head(ile_pokazac)

# przygotuj dane z polskimi nagłówkami (jak masz)
df_top = widok_top.rename(columns={
    "Pipe_ID":"ID odcinka", "Pressure_PSI":"Ciśnienie (PSI)", "Flow_GPM":"Przepływ (GPM)",
    "Velocity_FPS":"Prędkość (ft/s)", "Temperature_F":"Temperatura (°F)",
    "Pipe_Age_Years":"Wiek rury (lata)", "Pipe_Material":"Materiał rury",
    "Soil_Corrosivity":"Korozyjność gleby", "Ryzyko (%)":"Ryzyko (%)", "Ocena_modelu":"Ocena"
})[["ID odcinka","Ciśnienie (PSI)","Przepływ (GPM)","Prędkość (ft/s)","Temperatura (°F)",
     "Wiek rury (lata)","Materiał rury","Korozyjność gleby","Ryzyko (%)","Ocena"]]

# delikatna zebra (jasne szarości)
n_wierszy = len(df_top)
kolory_zebra = (['#FFFFFF','#F6F7F9'] * ((n_wierszy+1)//2))[:n_wierszy]

naglowki = list(df_top.columns)
komorki  = [df_top[c].tolist() for c in df_top.columns]

fig_tabela = go.Figure(go.Table(
    header=dict(
        values=naglowki,
        fill_color="#ECEFF3",
        line_color="#E5E7EB",
        font=dict(color="#111111", size=13),   # << wyraźny tekst w nagłówkach
        align="center",
        height=34
    ),
    cells=dict(
        values=komorki,
        fill_color=[kolory_zebra]*len(naglowki),
        line_color="#E5E7EB",
        font=dict(color="#111111", size=12),   # << wyraźny tekst w komórkach
        align="center",
        height=32,
        format=[None, ".1f", ".1f", ".1f", ".0f", None, None, None, ".0f", None]
    )
))
fig_tabela.update_layout(
    template="plotly_white",
    paper_bgcolor="white", plot_bgcolor="white",
    font_color="#111111",
    uniformtext_minsize=12, uniformtext_mode='show',
    margin=dict(l=0, r=0, t=0, b=0)
)

# ——— WYKRES KOŁOWY (ta sama zmienna wykorzystana też do PDF) ———
liczniki_ryzyka = dane_wyniki["Ocena_modelu"].value_counts().rename_axis("Kategoria").reset_index(name="Liczba")
wykres_pizza = px.pie(
    liczniki_ryzyka, names="Kategoria", values="Liczba", hole=0.55,
    color="Kategoria",
    color_discrete_map={"🔴 Wysokie ryzyko":"red", "🟡 Średnie ryzyko":"gold", "🟢 Niskie ryzyko":"green"},
    title="Struktura ryzyka w sieci"
)
wykres_pizza.update_traces(textinfo="percent+label")
wykres_pizza.update_layout(template="plotly_white", paper_bgcolor="white", plot_bgcolor="white", font_color="#111")

# ——— ROZMIESZCZENIE: TABELA (lewo) + KOŁO (prawo) ———
col_tab, col_pie = st.columns([2,1])
with col_tab:
    st.plotly_chart(fig_tabela, use_container_width=True, theme=None)
with col_pie:
    st.plotly_chart(wykres_pizza, use_container_width=True, theme=None)


# ============ POLSKIE NAZWY CECH ============
slownik_nazw_cech = {
    "Pressure_PSI":     "Ciśnienie (PSI)",
    "Flow_GPM":         "Przepływ (GPM)",
    "Velocity_FPS":     "Prędkość (ft/s)",
    "Temperature_F":    "Temperatura (°F)",
    "Pipe_Age_Years":   "Wiek rury (lata)",
    "Pipe_Material":    "Materiał rury",
    "Soil_Corrosivity": "Korozyjność gleby",
}

# ============ WYKRES WAŻNOŚCI CECH + SANDBOX „CO-JEŚLI” W 2 KOLUMNACH ============
st.subheader("📈 Czynniki ryzyka")

# wykres ważności cech
waznosc_df = pd.DataFrame({
    "Cechy": list(cechy_X.columns),
    "Waznosc": model_rf.feature_importances_,
})
waznosc_df["Cechy_PL"] = waznosc_df["Cechy"].map(slownik_nazw_cech).fillna(waznosc_df["Cechy"])
waznosc_df = waznosc_df.sort_values("Waznosc", ascending=True)

wykres_waznosc = px.bar(
    waznosc_df, x="Waznosc", y="Cechy_PL",
    orientation="h",
    title=""
)
wykres_waznosc.update_traces(
    marker=dict(
        color=waznosc_df["Waznosc"],         # kolory zależne od wartości
        colorscale="RdYlGn_r",               # czerwony → żółty → zielony
        line=dict(color="#111", width=0.8)   # obramowanie słupków
    ),
    hovertemplate="<b>%{y}</b><br>Importance: %{x:.3f}<extra></extra>"
)

wykres_waznosc.update_layout(
    title=dict(
        
        font=dict(size=20, color="#111"),
        x=0.5,                               # wyśrodkowany tytuł
        xanchor="center"
    ),
    xaxis=dict(
        title="Importance",
        showgrid=True, gridcolor="#e5e7eb",
        zeroline=False
    ),
    yaxis=dict(
        title="Feature",
        showgrid=False
    ),
    template="plotly_white",
    paper_bgcolor="white",
    plot_bgcolor="white",
    font=dict(color="#111", size=13),
    margin=dict(l=120, r=30, t=80, b=40),
    width=800,
    height=600
)


col_waz, col_sim = st.columns([2,1])
with col_waz:
    st.plotly_chart(wykres_waznosc, use_container_width=True, theme=None)
with col_sim:
    # st.markdown("### 🧪 Symulacja „co-jeśli”")
    wartosci_typowe = dane_wyniki.median(numeric_only=True).to_dict()
    s1, s2 = st.columns(2)
    with s1:
        cisnienie_sim = st.slider("Ciśnienie (PSI)", 0.0, 120.0, float(wartosci_typowe.get("Pressure_PSI", 60.0)), 0.1)
        wiek_sim      = st.slider("Wiek rury (lata)", 0,   60,    int(wartosci_typowe.get("Pipe_Age_Years", 10)), 1)
        material_sim  = st.selectbox("Materiał", sorted(dane_wyniki["Pipe_Material"].unique()))
    with s2:
        przeplyw_sim  = st.slider("Przepływ (GPM)",   0.0, 260.0, float(wartosci_typowe.get("Flow_GPM", 120.0)), 0.1)
        predkosc_sim  = st.slider("Prędkość (ft/s)",  0.0, 12.0, float(wartosci_typowe.get("Velocity_FPS", 4.0)), 0.1)
        gleba_sim     = st.selectbox("Korozyjność gleby", sorted(dane_wyniki["Soil_Corrosivity"].unique()))

    wiersz_sim = pd.DataFrame([{
        "Pressure_PSI": cisnienie_sim, "Flow_GPM": przeplyw_sim, "Velocity_FPS": predkosc_sim,
        "Temperature_F": wartosci_typowe.get("Temperature_F", 60.0),
        "Pipe_Age_Years": wiek_sim, "Pipe_Material": material_sim, "Soil_Corrosivity": gleba_sim
    }])

    wiersz_sim_kod = wiersz_sim.copy()
    wiersz_sim_kod["Pipe_Material"]    = koder_materialu.transform(wiersz_sim_kod["Pipe_Material"])
    wiersz_sim_kod["Soil_Corrosivity"] = koder_gleby.transform(wiersz_sim_kod["Soil_Corrosivity"])
    ryzyko_sim = model_rf.predict_proba(wiersz_sim_kod)[:, 1].item() * 100

    # Nowoczesny gauge
    wykres_gauge = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=ryzyko_sim,
        number={'suffix': "%", 'font': {'size': 48, 'color': "#111", 'family': "Arial Black"}},
        delta={'reference': 50, 'increasing': {'color': "red"}, 'decreasing': {'color': "green"}},
        gauge={
            'axis': {'range': [0, 100], 'tickwidth': 1, 'tickcolor': "#888"},
            'bar': {'color': "#0B7CFF", 'thickness': 0.18},
            'bgcolor': "white",
            'steps': [
                {'range': [0, prog_sredni], 'color': 'rgba(34,197,94,0.25)'},   # zielony pastel
                {'range': [prog_sredni, prog_wysoki], 'color': 'rgba(250,204,21,0.25)'}, # żółty pastel
                {'range': [prog_wysoki, 100], 'color': 'rgba(239,68,68,0.25)'}  # czerwony pastel
            ],
            'threshold': {
                'line': {'color': "#EF4444", 'width': 4},
                'thickness': 0.75,
                'value': prog_wysoki
            }
        },
        title={'text': "<b>Prognozowane ryzyko awarii</b>", 'font': {'size': 18, 'color': "#333"}}
    ))

    wykres_gauge.update_layout(
        template="plotly_white",
        paper_bgcolor="white",
        plot_bgcolor="white",
        margin=dict(l=10, r=10, t=60, b=10),
        height=350
    )

    st.plotly_chart(wykres_gauge, use_container_width=True, theme=None)

st.divider()

# ============ POBIERANIE: CSV + PDF ============
bajty_csv = dane_wyniki.to_csv(index=False).encode("utf-8")

# używamy wykres_pizza utworzonego wyżej + wykres_waznosc z sekcji wcześniejszej
try:
    bajty_pdf = zbuduj_pdf(
        dane_wyniki,
        {"wysokie": liczba_wysokie, "srednie": liczba_srednie, "niskie": liczba_niskie, "razem": liczba_razem},
        wykres_pizza, wykres_waznosc
    )
except Exception as e:
    bajty_pdf = None
    st.warning("Nie udało się wygenerować PDF. Zainstaluj 'kaleido' i 'reportlab'. "
               f"Szczegóły: {e}")

kol_dl1, kol_dl2 = st.columns(2)
with kol_dl1:
    st.download_button("⬇️ Pobierz wyniki (CSV)", data=bajty_csv,
                       file_name="wyniki_ryzyka_sieci.csv", mime="text/csv", use_container_width=True)
with kol_dl2:
    if bajty_pdf is not None:
        st.download_button("📄 Pobierz raport PDF (kolorowy)", data=bajty_pdf,
                           file_name="raport_AI_siec_wod_kan.pdf", mime="application/pdf", use_container_width=True)
    else:
        st.info("PDF jest niedostępny – doinstaluj pakiety: `pip install reportlab kaleido`.")
